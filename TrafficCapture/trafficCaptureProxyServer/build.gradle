/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'org.opensearch.migrations.java-application-conventions'
    id("io.freefair.lombok") version "8.0.1"
    id 'org.owasp.dependencycheck' version '8.2.1'
    id 'application'
}

configurations {
    // This is included to load certs and keys.  Doing it again isn't currently worth it.
    opensearchSecurityPlugin
}

dependencies {
    implementation 'org.opensearch.plugin:opensearch-security:2.6.0.0'
    opensearchSecurityPlugin 'org.opensearch.plugin:opensearch-security:2.6.0.0'
    implementation files(zipTree("$configurations.opensearchSecurityPlugin.singleFile").matching {
        include "*.jar"
    })

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.7'

    implementation project(':captureOffloader')
    implementation project(':nettyWireLogging')
    implementation group: 'io.netty', name: 'netty-all', version: '4.1.89.Final'
    implementation 'com.google.protobuf:protobuf-java:3.22.2'
    implementation 'org.opensearch:opensearch-common:2.6.0'
    implementation 'org.opensearch:opensearch-core:2.6.0'
    implementation 'org.opensearch:opensearch:2.6.0'
    implementation group: 'com.beust', name: 'jcommander', version: '1.82'
//    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.20.0'
//    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.20.0'


    testImplementation project(':captureProtobufs')
    testImplementation 'com.google.protobuf:protobuf-java:3.22.2'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testImplementation "com.google.protobuf:protobuf-java:3.22.2"
    implementation project(':captureOffloader')
    implementation project(':captureKafkaOffloader')
}

tasks.withType(Tar){
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(Zip){
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

application {
    // Define the main class for the application.
    mainClass = 'org.opensearch.migrations.trafficcapture.proxyserver.Main'
}


task unzip(type: Copy) {
    def zipFile = file('build/distributions/trafficCaptureProxyServer.zip')
    def outputDir = file("extracted")

    from zipTree(zipFile)
    into outputDir
}

task cleanUp(type: Delete) {
    delete 'extracted'
}

build.finalizedBy(unzip)
clean.finalizedBy(cleanUp)